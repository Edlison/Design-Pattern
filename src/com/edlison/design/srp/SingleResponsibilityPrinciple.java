package com.edlison.design.srp;

public class SingleResponsibilityPrinciple {
}

// 单一指责原则
// 说明：一个类或模块只负责完成一个指责
// 原则上我们在设计一个类的时候不应该设计成大而全的类，要设计粒度小功能单一的类。
// 实际软件开发中，不必严格遵守原则，可以先设计一个粗粒度的类，随着业务的发展再进行重构。

// 实际开发中可以按照以下参考意见进行重构或者设计：
// 1. 类依赖过多的其它类，或者代码的直接依赖关系过于复杂时，不符合高内聚低耦合的设计思想时，可以考虑对代码进行拆分。
// 2. 类的名称和实际的功能关系不大或者没有任何关联的时候，可以更加细粒度的拆分，把没无关的功能独立出去。
// 3. 类的代码函数过多影响代码的可读性和维护时，可以对代码进行方法级别的拆分。
